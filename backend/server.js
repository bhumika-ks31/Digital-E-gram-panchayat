import express from "express";
import cors from "cors";
import mongoose from "mongoose";
import dotenv from "dotenv";
import bodyParser from "body-parser";
import PDFDocument from "pdfkit";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

dotenv.config();

const app = express();

// ES Module fix for __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// -------------------- MIDDLEWARE --------------------

// CORS: allow deployed frontend + localhost
app.use(cors({
  origin: [
    "http://localhost:5173", // dev
    "https://digital-e-gram-panchayat-dvpl.onrender.com" // deployed frontend
  ]
}));

app.use(express.json());
app.use(bodyParser.json());
app.use("/public", express.static(path.join(__dirname, "public"))); // serve static files

// -------------------- MONGODB CONNECTION --------------------
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("MongoDB connected ✅"))
  .catch(err => console.error("MongoDB connection error ❌", err));

// -------------------- SCHEMAS --------------------

// Application Schema
const applicationSchema = new mongoose.Schema({
  userId: String,
  type: String, // e.g., Birth Certificate
  status: { type: String, default: "Pending" },
  submissionDate: { type: Date, default: Date.now },
  formData: Object
});
const Application = mongoose.model("Application", applicationSchema);

// Certificate Schema
const certificateSchema = new mongoose.Schema({
  applicationId: String,
  data: Object,
  generatedAt: { type: Date, default: Date.now }
});
const Certificate = mongoose.model("Certificate", certificateSchema);

// -------------------- ROUTES --------------------

// Submit new application
app.post("/api/application", async (req, res) => {
  const { userId, type, formData } = req.body;

  try {
    const appDoc = new Application({ userId, type, formData });
    await appDoc.save();
    res.status(201).json({ message: "Application submitted", application: appDoc });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to submit application" });
  }
});

// Get all applications for a user
app.get("/api/applications/:userId", async (req, res) => {
  const { userId } = req.params;
  try {
    const applications = await Application.find({ userId }).sort({ submissionDate: -1 });
    res.json(applications);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to fetch applications" });
  }
});

// Generate certificate PDF
app.post("/api/certificate/:applicationId", async (req, res) => {
  const { applicationId } = req.params;
  const formData = req.body;

  try {
    // Save certificate in DB
    const cert = new Certificate({ applicationId, data: formData });
    await cert.save();

    // Update application status
    await Application.findByIdAndUpdate(applicationId, { status: "Approved" });
  } catch (err) {
    console.error("Certificate save error:", err);
  }

  // Generate PDF
  const doc = new PDFDocument({ margin: 50 });
  let buffers = [];
  doc.on("data", buffers.push.bind(buffers));
  doc.on("end", () => {
    const pdfData = Buffer.concat(buffers);
    res
      .writeHead(200, {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment;filename=${applicationId}.pdf`,
        "Content-Length": pdfData.length
      })
      .end(pdfData);
  });

  // Title
  doc.fontSize(24).fillColor("#2E8B57").text("E-Gram Panchayat Certificate", { align: "center" });
  doc.fontSize(18).fillColor("black").text(`Service: ${formData.serviceName || 'Unknown'}`, { align: "center" });
  doc.moveDown(2);

  // Form data
  Object.entries(formData).forEach(([key, value]) => {
    if(key !== "serviceName") doc.fontSize(16).text(`${key}: ${value}`, { lineGap: 6 });
  });

  // Footer text
  doc.moveDown(3);
  doc.fontSize(12).fillColor("gray").text("Generated by E-Gram Panchayat System", { align: "center" });

  // Logo bottom-right
  const logoPath = path.join(__dirname, "public/E-gram.jpg");
  if (fs.existsSync(logoPath)) {
    const pageWidth = doc.page.width;
    const pageHeight = doc.page.height;
    const imgWidth = 150;
    const imgHeight = 150;
    doc.image(logoPath, pageWidth - imgWidth - 50, pageHeight - imgHeight - 50, { width: imgWidth, height: imgHeight });
  } else {
    console.warn("Logo not found at:", logoPath);
  }

  doc.end();
});

// -------------------- START SERVER --------------------
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
